#!/usr/bin/env bash


function git_reset_linuxbrew() {
    puts-step "Updating git repo"
    git --git-dir=$REPO reset --hard $LINUXBREW_COMMIT |& indent #|& brew_quiet
}


function git_gc_linuxbrew() {
    puts-step "Auto-optimizing git repo"
    git --git-dir=$REPO gc --auto |& indent #|& brew_quiet
}

function git_remedy_linuxbuild() {
    local REMEDY_NUM=$1
    case $REMEDY_NUM in
    0)
        [ $BUILD_DEBUG -gt 0 ] && set -o xtrace || true
        git --git-dir=$REPO init |& indent_debug
        git --git-dir=$REPO stash list |& indent_debug
        brew update-reset
        [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true
        return 0
    ;;
    1)
        [ $BUILD_DEBUG -gt 0 ] && set -o xtrace || true
        git --git-dir=$REPO init |& indent_debug
        git --git-dir=$REPO add origin https://github.com/Linuxbrew/brew.git |& indent_debug
        git --git-dir=$REPO pull --autostash --rebase=true origin master |& indent_debug
        [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true
        return 0
    ;;
    2)
        [ $BUILD_DEBUG -gt 0 ] && set -o xtrace || true
        git --git-dir=$REPO checkout -f master |& indent_debug
        git --git-dir=$REPO stash clear |& indent_debug
        git --git-dir=$REPO stash |& indent_debug
        [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true
        return 0
    ;;
    3)
        [ $BUILD_DEBUG -gt 0 ] && set -o xtrace || true
        git --git-dir=$REPO init |& indent_debug
        git --git-dir=$REPO remote set-url origin https://github.com/Linuxbrew/brew.git |& indent_debug
        git --git-dir=$REPO fetch --all --recurse-submodules=yes --jobs=$(grep --count ^processor /proc/cpuinfo) #|& indent_debug
        git --git-dir=$REPO checkout -f master |& indent_debug
        git --git-dir=$REPO stash clear |& indent_debug
        git --git-dir=$REPO stash |& indent_debug
        git --git-dir=$REPO clean -d -f |& indent_debug
        git --git-dir=$REPO update-index --really-refresh |& indent_debug
        git --git-dir=$REPO reset --hard |& indent_debug
        git --git-dir=$REPO pull --rebase=true --autostash origin master |& indent_debug
        [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true
        return 0
    ;;
    4)
        [ $BUILD_DEBUG -eq 0 ] && set -o xtrace || true
        puts-warn "Resorting to desperate measures..."
        # these are all the bew/git commands I ran in an interactive session
        # in which I was somehow able to rebuild the git repo. I don't know
        # what combination of these did the trick. But we're desperate at
        # this point.
        brew update-reset |& indent_debug
        brew update |& indent_debug
        brew update-reset |& indent_debug
        brew update |& indent_debug
        brew update-reset |& indent_debug
        brew prune  |& indent_debug
        git --git-dir=/app/.linuxbrew/Library/.git clean -d |& indent_debug
        git --git-dir=$REPO init |& indent_debug
        git --git-dir=/app/.linuxbrew/Library/.git clean -d |& indent_debug
        brew update-reset |& indent_debug
        git --git-dir=/app/.linuxbrew/Library/.git clean -d |& indent_debug
        brew cleanup -s |& indent_debug
        git --git-dir=$REPO init |& indent_debug
        git --git-dir=$REPO rev-parse --verify HEAD |& indent_debug
        git --git-dir=$REPO fetch |& indent_debug
        git --git-dir=$REPO stash clear |& indent_debug
        git --git-dir=$REPO stash |& indent_debug
        git --git-dir=$REPO stash --all |& indent_debug
        git --git-dir=$REPO clean -n |& indent_debug
        git --git-dir=$REPO clean -nd |& indent_debug
        git --git-dir=$REPO fetch -p |& indent_debug
        git --git-dir=$REPO fetch --recurse-submodules=yes --jobs=$(grep -c ^processor /proc/cpuinfo) --all |& indent_debug
        git --git-dir=$REPO stash clear |& indent_debug
        [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true
        return 0
    ;;
    5)
        [ $BUILD_DEBUG -gt 0 ] && set -o xtrace || true
        puts-warn "Trying one more thing..."
        git --git-dir=$REPO init |& indent_debug
        git --git-dir=$REPO remote set-url origin https://github.com/Linuxbrew/brew.git |& indent_debug
        brew update-reset |& indent_debug
        [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true
        return 0
    ;;
    *)
        puts-warn "Unable to run regular git checks. This build will probably fail."
        return 1
    ;;
    esac
}


function git_rebuild_latest() {
    do-debug "Running 'brew update --force'"
    brew update --force |& indent_debug
#    git --git-dir=$REPO reset --hard $LINUXBREW_COMMIT
#    # ensure there's quotes because the stdout can have an asterisk
#    BRANCH="$(git --git-dir=$REPO branch --contains $LINUXBREW_COMMIT | head -1)"; BRANCH="${BRANCH##* }"
#    git --git-dir=$REPO branch --set-upstream-to=origin/master $BRANCH
#    git --git-dir=$HOME/.linuxbrew/.git config --global user.email "no.one@nothin.no"
#    git --git-dir=$HOME/.linuxbrew/.git config --global user.name "Nothing None"
#    git --git-dir=$HOME/.linuxbrew/.git stash clear
#    git --git-dir=$REPO pull --allow-unrelated-histories
}

function git_commit_check() {
    set +e

    local REPO="$1"
    local REMEDY_NUM_GC=0
    local REMEDY_NUM_RESET=0

    # this seems to fix things consistently
    [ $BUILD_DEBUG -gt 0 ] && set -o xtrace || true
    puts-warn "Cleaning up git repo"
    git --git-dir=$REPO init |& indent_debug
    git --git-dir=$REPO remote set-url origin https://github.com/Linuxbrew/brew.git |& indent_debug
    git --git-dir=$REPO stash save |& indent_debug
    git --git-dir=$REPO fetch --prune |& indent_debug
    brew update-reset |& indent_debug
    [ $BUILDPACK_XTRACE -eq 0 ] && set +o xtrace || true

    #LINUXBREW_CURRENT_COMMIT="$(git --git-dir=$REPO show --oneline -s | cut -d' ' -f1)"
    local LINUXBREW_CURRENT_COMMIT=$(git --git-dir=$REPO rev-parse --verify HEAD) #|& indent_debug

    while [ $LINUXBREW_CURRENT_COMMIT != $LINUXBREW_COMMIT ]; do

        git_reset_linuxbrew
        if [ $? -gt 0 ]; then
            git_remedy_linuxbuild $REMEDY_NUM_RESET || break
        else
            break
        fi
        REMEDY_NUM_RESET=$(( $REMEDY_NUM_RESET + 1 ))

    done

    LINUXBREW_CURRENT_COMMIT=$(git --git-dir=$REPO rev-parse --verify HEAD) #|& indent_debug
    while [ $LINUXBREW_CURRENT_COMMIT != $LINUXBREW_COMMIT ]; do

        git_gc_linuxbrew
        if [ $? -gt 0 ]; then
            git_remedy_linuxbuild $REMEDY_NUM_GC || break
        else
            break
        fi
        REMEDY_NUM_GC=$(( $REMEDY_NUM_GC + 1 ))

    done

    unset KEEP_TRYING REMEDY_NUM_GC REMEDY_NUM_RESET
    set -e
}


function brew_doctor_recommends() {
    ORIG_PWD="$PWD"
    git --git-dir=/app/.linuxbrew/Library/.git stash |& indent \
    && git --git-dir=/app/.linuxbrew/Library/.git clean -d -f |& indent
    cd "$ORIG_PWD"
}


function git_checks_linuxbrew() {
    ORIG_PWD="$PWD"
    OLD_IFS=$IFS
    for repo in $(find . -type d -name '.git' -exec ls -d $PWD/{} \;); do
        repo="$(cd $repo; pwd)"
        do-debug "Fixing '$repo'"
        git_commit_check $repo
    done

    #brew_doctor_recommends

    IFS=$OLD_IFS
    cd "$ORIG_PWD"
}
