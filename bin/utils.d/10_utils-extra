#!/usr/bin/env bash

export BUILD_DEBUG_DEFAULT=0

# taken from https://gist.github.com/DinoChiesa/3e3c3866b51290f31243
# which is derived from https://gist.github.com/epiloque/8cf512c6d64641bde388
# which is based on https://gist.github.com/pkuczynski/8665367
## works for arrays of hashes, as long as the hashes do not have arrays
## Gist comment: 'this one does not handle string with doublequotes inside'
### SYNTAX: parse_yaml <yaml_file> <prefix_of_variables>
### USAGE: eval $(parse_yaml file.yaml "YAMLFILE_"
### EXAMPLE:
###     file.yaml =
###         development:
###           adapter: mysql2
###           encoding: utf8
###           database: my_database
###           username: root
###           roles:
###             - admin
###             - developer
###             - guest
###           password:
###           users:
###             -
###               name: pineapple
###               role: admin
###             -
###               name: umbrella
###               role: developer
### DO: eval $(parse_yaml file.yaml "development_")
### OUTPUT:
###     development_adapter=("mysql2")
###     development_encoding=("utf8")
###     development_database=("my_database")
###     development_username=("root")
###     development_roles+=("admin")
###     development_roles+=("developer")
###     development_roles+=("guest")
###     development_users__name+=("pineapple")
###     development_users__role+=("admin")
###     development_users__name+=("umbrella")
###     development_users__role+=("developer")
### > echo ${development_roles[@]}
###   admin developer guest
function parse_yaml() {
    local prefix=$2
    local s='[[:space:]]*'
    local w='[a-zA-Z0-9_]*'
    local fs="$(echo @|tr @ '\034')"
    # local repl_dash=${3:-__}
    # awk '{ split($0,keyval,":"); keyval[1]=gensub("-","'${repl_dash}'","g",keyval[1]); print keyval[1] ":" keyval[2];}'

    # remove comments, then blank lines, then do what that other guy had it do
    sed -ue "s|$s#.*||" -e "/^$s\$/d" "$1"                            \
    | sed -ne  "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
          -e   "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p"  \
    | awk -F"$fs" '{
          indent = length($1)/2;
          if (length($2) == 0) {
              conj[indent]="+";
          }
          else {
              conj[indent]="";
          }
          vname[indent] = $2;
          for (i in vname) {
              if (i > indent) {
                  delete vname[i];
              }
          }
          if (length($3) > 0) {
              vn="";
              for (i=0; i<indent; i++) {
                  vn=(vn)(vname[i])("_");
              }
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
          }
    }' \
    | sed -u 's/_=/+=/g'
}


function set-default-configvar() {
    local this_var=$1  # no spaces in var name
    local this_val="$2"
    local default="$3"

    # this must be shortened...
    if [ -s "$this_val" ]; then
        export $this_var=$(cat "$this_val" 2>/dev/null | head -n1 || echo "$default")
    else
        export $this_var="$default"
    fi
}


function print-env() {
    echo ""
    puts-step "Current environment:"
    env | sort |& indent
    echo ""
}


function indent_debug() {
    if [ ${BUILD_DEBUG:-$BUILD_DEBUG_DEFAULT} -gt 0 ]; then
        indent
    else
#        return 0
        true
    fi
}


function do-debug() {
    if [ ${BUILD_DEBUG:-$BUILD_DEBUG_DEFAULT} -gt 0 ]; then
        RE='s/^/ ~~~~~> DEBUG: /; e countdown;' && \
        echo $@ | sed ${SED_FLAG} "$RE"  || \
        echo " ~~~~~> DEBUG: $@"
    else
#        return 0
        true
    fi
}


# print a lot of stuff
function debug_heavy() {
    local EXTRA="|$1"
    do-debug "Relevant local variables:"
    set -o posix && set | sort | grep -E "HOMEBREW|PATH|HOME|APP_DIR|PACKAGE_EXTRAS" |& indent
}


function min() {
    A=$(( ${1:-1} * 1)); B=$(( ${2:-1} * 1))
    python3 -c "print(min("$A","$B"))"
}


function max() {
    A=$(( ${1:-1} * 1)); B=$(( ${2:-1} * 1));
    python3 -c "print(max("$A","$B"))"
}


function time_elapsed() {
    ELAPSED=$(awk '{printf "%f", $1 - $2}' <<< "$(date +'%s.%N') ${BUILD_START_TIME}")
    echo $(date --date=@$ELAPSED +'%M:%S:%2N') $@
    unset ELAPSED
}


# Syntax sugar.
function indent_notime() {
    # consider different annotations for stdout and stderr
    # http://stackoverflow.com/a/9113604/4106215
    # Things I've tried
    #     RE="s/^/\x1B[1G       /"
    #     RE="s/^/\r       /"
    #     RE="s/^/countdown 0 \"$@\"/e"
    #     RE="s/^/ $(countdown)      /"
    RE='s/^/        /'
    sed $SED_FLAG "$RE"
}


function time_remaining() {
    local TIME_REMAINING_FLOAT=$(time_remaining_float)
    declare -i TIME_REMAINING_INT=${TIME_REMAINING_FLOAT/.*/}
    echo ${TIME_REMAINING_INT}
}


function time_remaining_float() {
    awk '{printf "%f", $1 - $2}' <<< "${BUILD_MAX_RUNTIME} $(date +'%s.%N')"
}


# Get things from CONFIG_DIR
# arg1 = file to check for, cat contents if found
# arg2 = what to echo if file not found
get-configvar() {
    # get things from CONFIG_DIR
    CHECK_FOR="$1"
    DEFAULT="$2"
    if [ -f "$CHECK_FOR" ]; then
        cat "$CHECK_FOR" | head -n1 2>/dev/null
    else
        echo "$DEFAULT"
    fi
}


function unexport_configvar() {
    VAR="$1"
    do-debug "Unsetting $VAR"
    unset ${VAR}; unset VAR
}


# https://devcenter.heroku.com/articles/buildpack-api#bin-compile-summary
function export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}


# export_all_configvars & export_configvar are modified versions of Heroku's export_env_dir
function export_configvar() {
    #set +e  # don't exit if error
    #set -x
    local VAR=$1
    local DEFAULT=$2
    export "$VAR=$(cat $CONFIG_DIR/$VAR 2>/dev/null)"
      :
    export "$VAR=${!VAR:-$DEFAULT}"
      :
    do-debug "$VAR=${!VAR}"
}


function export_all_configvars() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}


function unexport_all_configvars() {
    for f in $(ls -A ${CONFIG_DIR}); do
        unexport_configvar ${f}
    done
    unset f
}


function change_shell_default() {
    # doesnt work
    export ORIG_SHELLOPTS=$SHELLOPTS
    export ORIG_BASHOPTS=$BASHOPTS
    export ORIG_PS4=$PS4
}


function reset_shell_default() {
    # doesnt work
    export PS4=${ORIG_PS4:-PS4}
    case $1 in
    shopt)
        shopt $2 $3
    ;;
    set)
        set $2 $3
    ;;
    esac
}


function proper_word() {
    local STR="$1"
    declare -u STRU="${STR:0:1}"
    local STRN=${#STR}
    declare -l STRL="${STR:1:$STRN}"
    echo "${STRU}${STRL}"
}


function get_orig_opt() {
    echo $(shopt -po ${1} || true)
}

# check the md5 hash of one file against the stored md5 hash of another
# file to see if the file has changed
# RETURNS:
#   1 if files differ
#   0 if they're the same
function check_hashchange() {
    ORIG_PIPEFAIL=$(get_orig_opt pipefail)
    ORIG_ERREXIT=$(get_orig_opt errexit)
    set +o pipefail
    set +o errexit
    local CURR_FILE=${1:-$BUILD_DIR/package-extras.yaml}
    local STORED_HASH_FILE=${2:-$CACHE_HASHFILE}
    #[ ! -a "${STORED_HASH_FILE}" ] && return 1 || true
    local CURR_HASH=$(md5sum "${CURR_FILE}"  2>/dev/null | cut -d' ' -f1)
    local STORED_HASH=$(cat "${STORED_HASH_FILE}" 2>/dev/null || echo -n "NONE")
    diff <(echo ${CURR_HASH}) <(echo ${STORED_HASH}) &>/dev/null
    declare -i HASH_IS_DIFF=$?
    do-debug "check_hashchange: CURR_FILE=$CURR_FILE"
    do-debug "check_hashchange: STORED_HASH_FILE=$STORED_HASH_FILE"
    do-debug "check_hashchange: CURR_HASH=$CURR_HASH"
    do-debug "check_hashchange: STORED_HASH=$STORED_HASH"
    do-debug "check_hashchange: HASH_IS_DIFF=$HASH_IS_DIFF"
    return ${HASH_IS_DIFF}
    ${ORIG_PIPEFAIL}
    ${ORIG_ERREXIT}
}

function make_md5hashfile() {
    local HASH_THIS_FILE=${1:-$BUILD_DIR/package-extras.yaml}
    local TO_THIS_FILE=${2:-$CACHE_HASHFILE}
    local STORE_HASH=$(md5sum "${HASH_THIS_FILE}" | cut -d' ' -f1 2>/dev/null || echo -n "ERROR WHEN HASHING $(date)")
    do-debug "make_md5hashfile: HASH_THIS_FILE=$HASH_THIS_FILE"
    do-debug "make_md5hashfile: TO_THIS_FILE=$TO_THIS_FILE"
    do-debug "make_md5hashfile: STORE_HASH=$STORE_HASH"
    echo ${STORE_HASH} >${TO_THIS_FILE}
}

function nullify_md5hashfile() {
    local HASHFILE=${1:-$CACHE_HASHFILE}
    do-debug "nullify_md5hashfile: Nullifying CACHE_HASHFILE=$HASHFILE"
    echo "HASH NULLIFIED DURING BUILD $(date)" >${HASHFILE}
}
