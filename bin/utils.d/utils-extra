#!/usr/bin/env bash

# taken from https://gist.github.com/DinoChiesa/3e3c3866b51290f31243
# which is derived from https://gist.github.com/epiloque/8cf512c6d64641bde388
# which is based on https://gist.github.com/pkuczynski/8665367
## works for arrays of hashes, as long as the hashes do not have arrays
## Gist comment: 'this one does not handle string with doublequotes inside'
### SYNTAX: parse_yaml <yaml_file> <prefix_of_variables>
### USAGE: eval $(parse_yaml file.yaml "YAMLFILE_"
### EXAMPLE:
###     file.yaml =
###         development:
###           adapter: mysql2
###           encoding: utf8
###           database: my_database
###           username: root
###           roles:
###             - admin
###             - developer
###             - guest
###           password:
###           users:
###             -
###               name: pineapple
###               role: admin
###             -
###               name: umbrella
###               role: developer
### DO: eval $(parse_yaml file.yaml "development_")
### OUTPUT:
###     development_adapter=("mysql2")
###     development_encoding=("utf8")
###     development_database=("my_database")
###     development_username=("root")
###     development_roles+=("admin")
###     development_roles+=("developer")
###     development_roles+=("guest")
###     development_users__name+=("pineapple")
###     development_users__role+=("admin")
###     development_users__name+=("umbrella")
###     development_users__role+=("developer")
### > echo ${development_roles[@]}
###   admin developer guest
function parse_yaml() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" \
        "$1" \
    | awk -F"$fs" '{
      indent = length($1)/2;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' \
    | sed 's/_=/+=/g'
}

# print a lot of stuff
function debug_heavy() {
    local EXTRA="|$1"
    do-debug "Relevant local variables:"
    set -o posix && set | sort | grep -E "HOMEBREW|PATH|HOME|APP_DIR|PACKAGE_EXTRAS" |& indent
}

# makes the brew output not show lines starting with '  ==>'
function brew_quiet() {
    if [ $PACKAGE_BUILDER_INSTALL_QUIET -gt 0 ]; then
        grep -vE --line-buffered '^\s*==>'
    else
        tee
    fi
}


function show_linuxbrew() {
    do-debug "Contents of $HOME/.linuxbrew:"
    ls -Flah $HOME/.linuxbrew | indent-debug || true
    do-debug "Contents of $HOME/.linuxbrew/bin:"
    ls -Flah $HOME/.linuxbrew/bin | indent-debug || true
    do-debug "Contents of $HOME/.linuxbrew/Cellar:"
    ls -Flah $HOME/.linuxbrew/Cellar | indent-debug || true
}

function show_linuxbrew_files() {
    show_files $BUILD_DIR/.cache
    show_files $BUILD_DIR/.linuxbrew
    show_files $APP_DIR/.cache
    show_files $APP_DIR/.linuxbrew
    show_files $CACHE_DIR/.cache
    show_files $CACHE_DIR/.linuxbrew
    show_linuxbrew
}

function git_commit_check() {
    set +e

    KEEP_TRYING=1
    REMEDY_NUM=0
    while [ $KEEP_TRYING -gt 0 ]; do
        LINUXBREW_CURRENT_COMMIT="$(git --git-dir="$BUILD_DIR/.linuxbrew/.git" show --oneline -s | cut -d' ' -f1)"
        if [[ "$LINUXBREW_CURRENT_COMMIT" != "$LINUXBREW_COMMIT" ]]; then

            puts-step "Updating git repo"
            git --git-dir="$BUILD_DIR/.linuxbrew/.git" reset --hard $LINUXBREW_COMMIT |& indent |& brew_quiet

            puts-step "Auto-optimizing git repo"
            git --git-dir="$BUILD_DIR/.linuxbrew/.git" gc --auto |& indent |& brew_quiet

        fi

        if [ $? -gt 0 ]; then
            REMEDY_NUM=$(( $REMEDY_NUM + 1 ))
            case $REMEDY_NUM in
            1)
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" init
            ;;
            2)
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" add origin https://github.com/Linuxbrew/brew.git
            ;;
            3)
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" checkout -f master
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" stash clear
            ;;
            4)
                rm -rf "$BUILD_DIR/.linuxbrew/.git/refs"
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" remote set-url origin https://github.com/Linuxbrew/brew.git
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" git fetch
                git --git-dir="$BUILD_DIR/.linuxbrew/.git" git pull origin master
            ;;
            *)
                puts-warn "Unable to run regular git checks. This build will probably fail."
                break
            ;;
            esac
        fi

    done

    unset KEEP_TRYING REMEDY_NUM
    set -e
}

function max() {
    python -c "print(max($1,$2))"
}

function min() {
    python -c "print(min($1,$2))"
}

function time_remaining() {
    echo $(( $BUILD_MAX_RUNTIME - $(date +'%s') ))
}
