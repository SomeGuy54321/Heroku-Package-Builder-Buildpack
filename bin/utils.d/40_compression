#!/usr/bin/env bash

# about checkpoints: https://www.gnu.org/software/tar/manual/html_section/tar_26.html
# this lets the xz show its output on different lines
# --checkpoint=1000 --checkpoint-action=exec=/tmp/trackxz.sh
TARFLAGS="--sparse --check-links --atime-preserve=system --delay-directory-restore --absolute-names"
# We definitely use the system xz for decompression.
# But if brew has its own xz then it'll use that for compression.
# Best to use the same one both times
XZ="$(which xz)"; XZ=${XZ:-/usr/bin/xz}
COMPRESS_PROGRAM="$XZ --verbose --verbose --threads=0"  #--extreme
COMPRESSION_LEVEL_DEFAULT=9  # Runs 0..9, 9 = best and slowest compression, default is 6
COMPRESSION_MAX_TRIES=4
MAX_JOBS=$(grep --count ^processor /proc/cpuinfo)

function decompress_to_builddir() {
    local TARFLAGS="--remove-files --overwrite $TARFLAGS"
    local COMPRESS_PROGRAM="$COMPRESS_PROGRAM -$(compression_level_chooser)"
    compress_do extract "$1" "$TARFLAGS" "$COMPRESS_PROGRAM" ${COMPRESSION_MAX_TRIES}
}

function compress_to_cache() {
    local TARFLAGS=" --same-permissions --same-owner --xattrs $TARFLAGS"
    local COMPRESS_PROGRAM="$COMPRESS_PROGRAM -$(compression_level_chooser)"
    compress_do create "$1" "$TARFLAGS" "$COMPRESS_PROGRAM" ${COMPRESSION_MAX_TRIES}
}

function compression_level_chooser() {
    #TODO: Make this smarter, maybe record buildtimes in sqlite database > store it in cache > reread it each run to 'learn lessons' from the last
    #ARG1
    local TRY_NUM=${1:-0}
    #ARG2
    local CURR_LEVEL=${2:-$COMPRESSION_LEVEL_DEFAULT}
    #ARG3
    local SAFE_JOBS_NUM=${3:-$MAX_JOBS}
    #ARG4
    #declare -i SIZE2COMPRESS=$(du --summarize ${4:-$HOME/.linuxbrew $HOME/.cache} 2>/dev/null || echo -n 0)
    # this is much faster and doesnt print extraneous text, prints in kilobytes
#    declare -i SIZE2COMPRESS=$(find ${4:-$HOME/.linuxbrew $HOME/.cache} -printf %k"\n" 2>/dev/null | awk '{ sum += $1 } END { print sum }' || echo -n 0)
#    do-debug "SIZE2COMPRESS: ${SIZE2COMPRESS}"
    local TIME_LEFT=$(time_remaining)
    declare -i TIME_LEFT_INT=${TIME_LEFT/.*/}

    local USE_THREADS
    local USE_COMPRESSION
    local USE_XTREME
    if [ 0 ]; then
        USE_THREADS=${USE_THREADS}
        USE_COMPRESSION=${USE_COMPRESSION}
        USE_XTREME=${USE_XTREME}
        # Maybe useful xz args:
        #   --memlimit-decompress=M
        #   --memlimit-compress=N
        #   --memlimit=X (same as --memlimit-compress=X and --memlimit-decompress=X)
    fi

    # if < 2min remains then drop the compression level to min, or if >500mb
    if [ ${TIME_LEFT_INT} -le 120 ]; then  # || [ ${SIZE2COMPRESS[0]} -gt 500000 ]; then
        echo 0
    # if I've passed in a try number then I'm wanting to decrease it
    elif [ ${TRY_NUM} -gt 0 ]; then
        max 0 $(( $CURR_LEVEL - 1 ))
    # else I'm pretty much just accessing the default compression level
    else
        max 0 ${CURR_LEVEL}
    fi
}

function job_reduce_increment() {
    local MAX_TRIES=${1:-$COMPRESSION_MAX_TRIES}
    max 1 $(( $MAX_JOBS / $MAX_TRIES ))
}

function compress_do() {
    set +e  # don't exit if error

    declare -l DO_WHAT="$1"
    local INPATH="$2"
    local TARFLAGS="$3"
    local COMPRESS_PROG="$4"
    declare -i MAX_TRIES=$5

    if [ ${#MAX_TRIES} -eq 0 ]; then
        MAX_TRIES=${COMPRESSION_MAX_TRIES}
    fi

    local BASENAME=$(basename "$INPATH")
    local DIRNAME=$(cd $(dirname "$INPATH"); pwd)
    local FULL_INPATH="$DIRNAME/$BASENAME"

    local DO_WHAT_LABEL
    local LAST_ARG
    local DESTINATION
    if [ ${DO_WHAT/ /} == extract ]; then
        # when extracting I'm passing in the whole path to the tarfile to decompress to BUILD_DIR
        DESTINATION="$BUILD_DIR"
        TARFLAGS=" --extract --file ${FULL_INPATH} $TARFLAGS ";
        LAST_ARG=" --directory=$DESTINATION";
        DO_WHAT_LABEL="Decompressing";
    elif [ ${DO_WHAT/ /} == create ]; then
        # when compressing I'm just passing in the directory to compress to CACHE_DIR
        DESTINATION="${CACHE_DIR}/${BASENAME}.tar.xz"
        TARFLAGS=" --create --file ${DESTINATION} $TARFLAGS --exclude-vcs ";
        LAST_ARG=" ${FULL_INPATH}";
        DO_WHAT_LABEL="Compressing";
    else
        echo "Need to specify the tar action at compress_do"
        set -e
        return 1
    fi

    local JOBS=${MAX_JOBS}
    local THREADS_REDUCE_INCREMENT=$(job_reduce_increment)
    local TRY_NUM=0
    while [ 1 ]; do
        puts-step "$DO_WHAT_LABEL ${FULL_INPATH} to $DESTINATION"

        #echo -e '#!/usr/bin/env bash\ntail -n1 /tmp/.linuxbrew.tar.xz.log 2>/dev/null' >/tmp/trackxz.sh && chmod +x /tmp/trackxz.sh
        #(set -x; tar ${TARFLAGS} --use-compress-program "$COMPRESS_PROGRAM" ${LAST_ARG}) |& indent
        proc_watcher tar ${TARFLAGS} --use-compress-program "${COMPRESS_PROGRAM}" ${LAST_ARG} |& indent

        # it might run out of memory and fail so reduce intensity and try again
        RTN_VAL=$?
        if [ $RTN_VAL -gt 0 ] && [ $TRY_NUM -le $MAX_TRIES ]; then
            TRY_NUM=$(( $TRY_NUM + 1 ))
            JOBS=$(max 1 $(( ${JOBS} - ${THREADS_REDUCE_INCREMENT} )))
            COMP_LEVEL=$(compression_level_chooser ${TRY_NUM})
            # remove extreme compression
            COMPRESS_PROGRAM=${COMPRESS_PROGRAM/--extreme/}
            # reduce number of threads
            COMPRESS_PROGRAM=$(echo ${COMPRESS_PROGRAM} | sed -e "s/\s\?--threads=[0-9]*\s\?/ --threads=${JOBS:-0} /")
            # rethink compression level
            COMPRESS_PROGRAM=$(echo ${COMPRESS_PROGRAM} | sed -e "s/\s\?-[0-9]\b\s\?/ -${COMP_LEVEL:-9} /")
        else
            set -e  # exit if error
            return ${RTN_VAL}
            break
        fi
    done
    set -e  # exit if error
}
