#!/usr/bin/env bash

TARFLAGS="--sparse --check-links --same-permissions --same-owner --atime-preserve=system --delay-directory-restore --absolute-names "
COMPRESS_PROGRAM="xz --extreme --verbose --threads=0"
COMPRESSION_LEVEL_DEFAULT=9  # Runs 0..9, 9 = best and slowest compression, default is 6
COMPRESSION_MAX_TRIES=4
MAX_JOBS=$(grep --count ^processor /proc/cpuinfo)

function compression_level_chooser() {
    local TRIES_MADE=$1
    if [ ${#TRIES_MADE} -eq 0 ]; then TRIES_MADE=0; fi
    local CURR_LEVEL=$2
    if [ ${#CURR_LEVEL} -eq 0 ]; then CURR_LEVEL=$COMPRESSION_LEVEL_DEFAULT; fi
    local TIME_LEFT=$(time_remaining)
    # do something fancy here eventually
    echo $CURR_LEVEL
}

function job_reduce_increment() {
    local MAX_TRIES=$1
    if [ ${#MAX_TRIES} -eq 0 ]; then MAX_TRIES=$COMPRESSION_MAX_TRIES; fi
    max 1 $(( $MAX_JOBS / $MAX_TRIES ))
}

function compress_do() {
    set +e  # don't exit if error

    declare -l DO_WHAT="$1"
    local INPATH="$2"
    local TARFLAGS="$3"
    local COMPRESS_PROG="$4"
    declare -i MAX_TRIES=$5

    if [ ${#MAX_TRIES} -eq 0 ]; then
        MAX_TRIES=$COMPRESSION_MAX_TRIES
    fi

    local BASENAME=$(basename "$INPATH")
    local DIRNAME=$(cd $(dirname "$INPATH"); pwd)
    local FULL_INPATH="$DIRNAME/$BASENAME"

    local DO_WHAT_LABEL
    local LAST_ARG
    local DESTINATION
    if [[ "${DO_WHAT/ /}" == "extract" ]]; then
        # when extracting I'm passing in the whole path to the tarfile to decompress to BUILD_DIR
        DESTINATION="$BUILD_DIR"
        TARFLAGS=" --extract --file ${FULL_INPATH} $TARFLAGS";
        LAST_ARG=" --directory=$DESTINATION";
        DO_WHAT_LABEL="Decompressing";
    else
        # when compressing I'm just passing in the directory to compress to CACHE_DIR
        DESTINATION="${CACHE_DIR}/${BASENAME}.tar.xz"
        TARFLAGS=" --create --file ${DESTINATION} $TARFLAGS";
        LAST_ARG=" ${FULL_INPATH}";
        DO_WHAT_LABEL="Compressing";
    fi

    local JOBS=$MAX_JOBS
    local THREADS_REDUCE_INCREMENT=$(job_reduce_increment)
    local TRY_NUM=0
    while [ 1 ]; do
        do-debug "$DO_WHAT_LABEL ${FULL_INPATH} to $DESTINATION"
        tar $TARFLAGS --use-compress-program=${COMPRESS_PROGRAM} $LAST_ARG |& indent

        # it might run out of memory and fail so reduce intensity and try again
        RTN_VAL=$?
        if [ $RTN_VAL -gt 0 ] && [ $TRY_NUM -le $MAX_TRIES ]; then
            TRY_NUM=$(( $TRY_NUM + 1 ))
            JOBS=$(max 1 $(( $JOBS - $THREADS_REDUCE_INCREMENT )))
            # remove extreme compression
            COMPRESS_PROGRAM=${COMPRESS_PROGRAM/--extreme/}
            # reduce number of threads
            COMPRESS_PROGRAM=$(echo $COMPRESS_PROGRAM | sed -e "s/\s\?--threads=[0-9]*\s\?/--threads=$JOBS /")
            # rethink compression level
            COMPRESS_PROGRAM=$(echo $COMPRESS_PROGRAM | sed -e "s/\s\?-[0-9]\b\s\?/ -$(compression_level_chooser) /")
        else
            set -e  # exit if error
            return $RTN_VAL
            break
        fi
    done
    set -e  # exit if error
}

function decompress_to_builddir() {
    local TARFLAGS="--remove-files --overwrite $TARFLAGS"
    local COMPRESS_PROGRAM="$COMPRESS_PROGRAM -$(compression_level_chooser)"
    compress_do extract "$1" "$TARFLAGS" "$COMPRESS_PROGRAM" $COMPRESSION_MAX_TRIES
}

function compress_to_cache() {
    local TARFLAGS=" $TARFLAGS"
    local COMPRESS_PROGRAM="$COMPRESS_PROGRAM -$(compression_level_chooser)"
    compress_do create "$1" "$TARFLAGS" "$COMPRESS_PROGRAM" $COMPRESSION_MAX_TRIES
}

#function decompress_to_builddir() {
#    local INDIR="$1"
#    local BASENAME=$(basename "$INDIR")
#    local DIRNAME=$(cd $(dirname "$INDIR"); pwd)
#    local FULL_INDIR="$DIRNAME/$BASENAME"
#    local TARFLAGS="--remove-files --overwrite $TARFLAGS"
#
#    do-debug "Decompressing ${FULL_INDIR} into ${BUILD_DIR}"
#    tar --extract               \
#        --file ${FULL_INDIR} \
#        $TARFLAGS \
#        --use-compress-program="$COMPRESS_PROGRAM" \
#        --directory=${BUILD_DIR} \
#    |& indent
#}

#function compress_to_cache() {
#    local INDIR="$1"
#    local MAX_TRIES=$2
#
#    [ ${#MAX_TRIES} -eq 0 ] && MAX_TRIES=$COMPRESSION_MAX_TRIES || true
#    COMPRESSION_JOB_REDUCE_INCREMENT=$(job_reduce_increment)
#    local JOBS=$COMPRESSION_JOBS
#
#    local BASENAME=$(basename "$INDIR")
#    local DIRNAME=$(cd $(dirname "$INDIR"); pwd)
#    local FULL_INDIR="$DIRNAME/$BASENAME"
#    local TARFLAGS=" $TARFLAGS"
#    local TRY_NUM=0
#
#    while [ 1 ]; do
#        do-debug "Compressing ${FULL_INDIR} to ${CACHE_DIR}/${BASENAME}.tar.xz"
#        tar --create               \
#            --file ${CACHE_DIR}/${BASENAME}.tar.xz \
#            $TARFLAGS \
#            --use-compress-program="$COMPRESS_PROGRAM" \
#            ${FULL_INDIR} \
#        |& indent
#
#        # it might run out of memory and fail so reduce intensity and try again
#        if [ $? -gt 0 ] && [ $TRY_NUM -le $MAX_TRIES ]; then
#            TRY_NUM=$(( $TRY_NUM + 1 ))
#            JOBS=$(max 1 $(( $JOBS - $COMPRESSION_JOB_REDUCE_INCREMENT )))
#            COMPRESS_PROGRAM="${COMPRESS_PROGRAM/--extreme/}"
#            COMPRESS_PROGRAM=$(echo $COMPRESS_PROGRAM | sed -e "s/--threads=[0-9]*\s*/--threads=$JOBS /")
#        else
#            break
#        fi
#    done
#}
