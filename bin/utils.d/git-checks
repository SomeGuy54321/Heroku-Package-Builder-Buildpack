#!/usr/bin/env bash


function git_reset_linuxbrew() {
    puts-step "Updating git repo"
    git --git-dir="$REPO" reset --hard $LINUXBREW_COMMIT |& indent #|& brew_quiet
}


function git_gc_linuxbrew() {
    puts-step "Auto-optimizing git repo"
    git --git-dir="$REPO" gc --auto |& indent #|& brew_quiet
}


function git_remedy_linuxbuild() {
    local REMEDY_NUM=$1
    case $REMEDY_NUM in
    0)
        do-debug "Running 'git init'"
        git --git-dir="$REPO" init |& indent-debug
        brew update-reset
        return 0
    ;;
    1)
        do-debug "Running 'git add origin'"
        git --git-dir="$REPO" init |& indent-debug
        git --git-dir="$REPO" add origin https://github.com/Linuxbrew/brew.git |& indent-debug
        git --git-dir="$REPO" pull --autostash --rebase origin master |& indent-debug
        return 0
    ;;
    2)
        do-debug "Running checkout -f master --> git stash clear"
        git --git-dir="$REPO" checkout -f master |& indent-debug
        git --git-dir="$REPO" stash clear |& indent-debug
        git --git-dir="$REPO" stash |& indent-debug
        #git --git-dir="$REPO" clean -d -f |& indent-debug
        return 0
    ;;
    3)
        do-debug "Deleting .git/refs --> git init --> git remote set-url --> git checkout -f master --> git fetch --> git pull origin master"
        rm -rf "$REPO/refs"
        git --git-dir="$REPO" init |& indent-debug
        git --git-dir="$REPO" remote set-url origin https://github.com/Linuxbrew/brew.git |& indent-debug
        git --git-dir="$REPO" fetch --all --recurse-submodules=yes --jobs=$(grep --count ^processor /proc/cpuinfo) |& indent-debug
        git --git-dir="$REPO" checkout -f master |& indent-debug
        git --git-dir="$REPO" stash clear |& indent-debug
        git --git-dir="$REPO" stash |& indent-debug
        git --git-dir="$REPO" clean -d -f |& indent-debug
        git --git-dir="$REPO" update-index --really-refresh |& indent-debug
        git --git-dir="$REPO" reset --hard |& indent-debug
        git --git-dir="$REPO" pull --rebase=true --autostash origin master |& indent-debug
        return 0
    ;;
    *)
        puts-warn "Unable to run regular git checks. This build will probably fail."
        return 1
    ;;
    esac
}

function git_commit_check() {
    set +e

    local REPO="$1"
    local REMEDY_NUM_GC=0
    local REMEDY_NUM_RESET=0
    #LINUXBREW_CURRENT_COMMIT="$(git --git-dir="$REPO" show --oneline -s | cut -d' ' -f1)"
    local LINUXBREW_CURRENT_COMMIT="$(git --git-dir="$REPO" rev-parse --verify HEAD)" |& indent-debug

    while [[ "$LINUXBREW_CURRENT_COMMIT" != "$LINUXBREW_COMMIT" ]]; do

        git_reset_linuxbrew
        if [ $? -gt 0 ]; then
            git_remedy_linuxbuild $REMEDY_NUM_RESET || break
        fi
        REMEDY_NUM_RESET=$(( $REMEDY_NUM_RESET + 1 ))

    done

    LINUXBREW_CURRENT_COMMIT="$(git --git-dir="$REPO" rev-parse --verify HEAD)" |& indent-debug
    while [[ "$LINUXBREW_CURRENT_COMMIT" != "$LINUXBREW_COMMIT" ]]; do

        git_gc_linuxbrew
        if [ $? -gt 0 ]; then
            git_remedy_linuxbuild $REMEDY_NUM_GC || break
        fi
        REMEDY_NUM_GC=$(( $REMEDY_NUM_GC + 1 ))

    done

    unset KEEP_TRYING REMEDY_NUM_GC REMEDY_NUM_RESET
    set -e
}


function brew_doctor_recommends() {
    ORIG_PWD="$PWD"
    git --git-dir=/app/.linuxbrew/Library/.git stash |& indent \
    && git --git-dir=/app/.linuxbrew/Library/.git clean -d -f |& indent
    cd "$ORIG_PWD"
}


function git_checks_linuxbrew() {
    ORIG_PWD="$PWD"
    OLD_IFS=$IFS
    for repo in $(find . -type d -name '.git' -exec ls -d $PWD/{} \;); do
        repo="$(cd $repo; pwd)"
        do-debug "Fixing '$repo'"
        git_commit_check $repo
    done

    #brew_doctor_recommends

    IFS=$OLD_IFS
    cd "$ORIG_PWD"
}
