#!/usr/bin/env bash

# According to this: https://github.com/Linuxbrew/legacy-linuxbrew/issues/415#issuecomment-105616862
# We can avoid installing gcc if gcc is version 4+, which saves 250 mb
function can_use_system_gcc() {
    local GCC_PATH=$(which gcc) #$(find_system_exe gcc)
    local MIN_GCC_VERSION=4.0
    local INSTALLED_GCC_VERSION=$(${GCC_PATH} -dumpversion)
    awk "BEGIN {if($INSTALLED_GCC_VERSION >= $MIN_GCC_VERSION) {printf(1);} else {printf(0);}}"
}

# According to this we can avoid installing glibc if gcc is version 2.19+, which saves ~250 mb
# https://github.com/Linuxbrew/legacy-linuxbrew/issues/813#issuecomment-184475893
# This says we can know the version with ldd:
# http://www.linuxquestions.org/questions/linux-software-2/how-to-check-glibc-version-263103/#post3842423
function can_use_system_glibc() {
    local LDD_PATH=$(which ldd) #$(find_system_exe ldd)
    local MIN_GLIBC_VERSION=2.19
    local INSTALLED_GLIBC_VERSION=$(${LDD_PATH} --version | head -n1 | rev | cut -d' ' -f1 | rev 2>/dev/null)
    awk "BEGIN {if($INSTALLED_GLIBC_VERSION >= $MIN_GLIBC_VERSION) {printf(1);} else {printf(0);}}"
}

function search_path() {
    local SEARCH_WORD="${1}"
    local OLDIFS=${IFS}
    IFS=':'
    local PATH_ARR="${PATH[@]}"
    for DIR in $PATH_ARR; do
        local MATCH_FILES=$(ls -1pAd --color=never ${DIR}/* 2>/dev/null | grep -v '/$' | grep --color=never -E "$SEARCH_WORD")
        if [ "$MATCH_FILES" != "" ]; then echo ${MATCH_FILES}; fi
    done
    local IFS=${OLDIFS}
}

## search everywhere in PATH except in .linuxbrew for an exe matching the version we want
#function find_system_gcc() {
#    local MIN_VERSION=${1:-4}
#    local EXE='[^0-9A-Za-z]gcc$'
#    local VERSION_COMMAND='-dumpversion'
#    local EXCLUDE_PATHSTR='.linuxbrew'
#    local OLDIFS=$IFS
#    export IFS="
#"
#    declare -a VERPATH
#    for exepath in $(search_path ${EXE} | grep -v '/$' | grep -Fv "$EXCLUDE_PATHSTR"); do
#        VERPATH+=($(${exepath} $VERSION_COMMAND 2>/dev/null)@${exepath})
#    done
#    export IFS=${OLDIFS}
#    local HIGHEST_VERSION=$(echo ${VERPATH[@]} | tr ' ' '\n' | sort -gr | cut -d'@' -f1 | head -n1)
#    if [ $(awk "BEGIN {if($MIN_VERSION > ${HIGHEST_VERSION:-0}) {printf(0);} else {printf(1);}}") -gt 0 ]; then
#        # try to get the highest version installed thats closest to root
#        declare -a HIGH_VERSION_EXES
#        for verexepath in $(echo ${VERPATH[*]} | tr ' ' '\n' | grep -F "${HIGHEST_VERSION}"); do
#            local exepath=$(echo ${verexepath} | cut -d'@' -f2); local exepath_len=${#exepath}
#            local exepath_noslashes=${exepath//\//}; local exepath_noslashes_len=${#exepath_noslashes}
#            local exepath_numslashes=$((exepath_len - exepath_noslashes_len))
#            HIGH_VERSION_EXES+=(${exepath_numslashes}@${exepath})
#        done
#        echo ${HIGH_VERSION_EXES[*]} | sort -g | head -n1 | cut -d'@' -f2
#    fi
#}
#
## search everywhere in PATH except in .linuxbrew for an exe matching the version we want
#function find_system_glibc() {
#    local MIN_VERSION=${1:-2.19}
#    local EXE='[^0-9A-Za-z]ldd$'
#    local VERSION_COMMAND='--version'
#    local EXCLUDE_PATHSTR='.linuxbrew'
#    local OLDIFS=$IFS
#    export IFS="
#"
#    declare -a VERPATH
#    for exepath in $(search_path ${EXE} | grep -v '/$' | grep -v "$EXCLUDE_PATHSTR"); do
#        VERPATH+=($(${exepath} $VERSION_COMMAND | head -n1 | rev | cut -d' ' -f1 | rev 2>/dev/null)@${exepath})
#        echo -n "${VERPATH[*]}"
#    done
#    export IFS=${OLDIFS}
#    local HIGHEST_VERSION=$(echo ${VERPATH[@]} | tr ' ' '\n' | sort -gr | cut -d'@' -f1 | head -n1)
#    if [ $(awk "BEGIN {if($MIN_VERSION > ${HIGHEST_VERSION:-0}) {printf(0);} else {printf(1);}}") -gt 0 ]; then
#        # try to get the highest version installed thats closest to root
#        declare -a HIGH_VERSION_EXES
#        for verexepath in $(echo ${VERPATH[*]} | tr ' ' '\n' | grep -F "${HIGHEST_VERSION}"); do
#            local exepath=$(echo ${verexepath} | cut -d'@' -f2); local exepath_len=${#exepath}
#            local exepath_noslashes=${exepath//\//}; local exepath_noslashes_len=${#exepath_noslashes}
#            local exepath_numslashes=$((exepath_len - exepath_noslashes_len))
#            HIGH_VERSION_EXES+=(${exepath_numslashes}@${exepath})
#        done
#        echo ${HIGH_VERSION_EXES[*]} | sort -g | head -n1 | cut -d'@' -f2
#    fi
#}
