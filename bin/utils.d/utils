#!/usr/bin/env bash

shopt -s extglob

[ $(uname) == "Darwin" ] && SED_FLAG='-l' || SED_FLAG='-u'

BUILD_DEBUG=0  # just so there isn't an error thrown when this is sourced, shoudl be overridden

function set-default-configvar() {
    local this_var=$1  # no spaces in var name
    local this_val="$2"
    local default="$3"

    # this must be shortened...
    if [ -s "$this_val" ]; then
        export $this_var=$(cat "$this_val" 2>/dev/null | head -n1 || echo "$default")
    else
        export $this_var="$default"
    fi
}

function print-env() {
    echo ""
    puts-step "Current environment:"
    env | sort |& indent
    echo ""
}

function do-debug() {
    if [ $BUILD_DEBUG -gt 0 ]; then
        echo "-----> DEBUG1: $@"
    fi
}
alias do_debug='do-debug'

# Syntax sugar.
indent() {
    # consider different annotations for stdout and stderr
    # http://stackoverflow.com/a/9113604/4106215
    RE="s/^/       /"
    sed $SED_FLAG "$RE"
}

indent-debug() {
    RE="s/^/       /"
    if [ $BUILD_DEBUG -gt 0 ]; then
        sed $SED_FLAG "$RE"
    fi
}

# Clean up pip output
cleanup() {
    do-debug "Running cleanup()"
    sed $SED_FLAG -e 's/\.\.\.\+/.../g' | sed $SED_FLAG '/already satisfied/Id' | sed $SED_FLAG -e '/Overwriting/Id' |  sed $SED_FLAG -e '/python executable/Id' | sed $SED_FLAG -e '/no previously-included files/Id'
}

# Buildpack Steps.
function puts-step (){
    echo "-----> $@"
}

# Buildpack Warnings.
function puts-warn (){
    echo " !     $@"
}

# Usage: $ set-env key value
function set-env (){
    do-debug "Adding 'export $1=$2' to $PROFILE_PATH"
    echo "export $1=$2" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
function set-default-env (){
    # sets $1 to $2 if $1 isnt already set
    do-debug "Adding 'export $1=\${$1:-$2}' to $PROFILE_PATH"
    echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
function un-set-env (){
    do-debug "Adding 'unset $1' to $PROFILE_PATH"
    echo "unset $1" >> $PROFILE_PATH
}

# https://devcenter.heroku.com/articles/buildpack-api#bin-compile-summary
function export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

# Does some serious copying.
function deep-cp (){
  find -H $1 -maxdepth 1 -name '.*' -a \( -type d -o -type f -o -type l \) -exec cp -a '{}' $2 \;
  cp -r $1/!(tmp) $2
}

# Does some serious moving.
function deep-mv (){
  deep-cp $1 $2

  rm -fr $1/!(tmp)
  find -H $1 -maxdepth 1 -name '.*' -a \( -type d -o -type f -o -type l \) -exec rm -fr '{}' \;
}


# Get things from CONFIG_DIR
# arg1 = file to check for, cat contents if found
# arg2 = what to echo if file not found
get-configvar() {
    # get things from CONFIG_DIR
    CHECK_FOR="$1"
    DEFAULT="$2"
    if [ -f "$CHECK_FOR" ]; then
        cat "$CHECK_FOR" | head -n1 2>/dev/null
    else
        echo "$DEFAULT"
    fi
}

# Buildpack Commands.
puts-cmd() {
  echo "     $ $@"
}


function show_files() {
    VAR="$1"
    do-debug "Contents of $VAR:"
    ls -Flah "${VAR}" |& indent-debug || true
}

# Does some serious copying.
function deep_cp_subdirs(){
    for f in $(ls -A $1); do
        cp -af $f $2 |& indent || true
    done
    unset f
}

# dynamically export configvars
function export_configvar() {
    VAR="$1"
    DEFAULT="$2"
    SET_TO="$(cat ${CONFIG_DIR}/${VAR})" || SET_TO="$DEFAULT" |& indent-debug
    do-debug "Setting $VAR to \"$DEFAULT\""
    export "$VAR"="$SET_TO" || puts-warn "Unable to set configvar $VAR to \"$SET_TO\""
    unset SET_TO DEFAULT VAR
}

function unexport_configvar() {
    VAR="$1"
    do-debug "Unsetting $VAR"
    unset ${VAR}; unset VAR
}

function export_all_configvars() {
    for f in $(ls -A ${CONFIG_DIR}); do
        export_configvar ${f}
    done
    unset f
}

function unexport_all_configvars() {
    for f in $(ls -A ${CONFIG_DIR}); do
        unexport_configvar ${f}
    done
    unset f
}
