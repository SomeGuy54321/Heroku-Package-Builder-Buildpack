#!/usr/bin/env bash

shopt -s extglob
[ $(uname) == "Darwin" ] && SED_FLAG='-l' || SED_FLAG='-u'

# this should hopefully put the adjacent bin directory in the path when this is sourced
export ORIG_PATH=$PATH
export PATH="$(dirname $BASH_SOURCE)/bin:$PATH"
#echo $PATH

# Syntax sugar.
indent() {
    # consider different annotations for stdout and stderr
    # http://stackoverflow.com/a/9113604/4106215
    # Things I've tried
    #     RE="s/^/\x1B[1G       /"
    #     RE="s/^/\r       /"
    #     RE="s/^/countdown 0 \"$@\"/e"
    #     RE="s/^/ $(countdown)      /"
    RE='s/^/        /; e countdown;'
    sed $SED_FLAG "$RE" #2>/dev/null
}

# Clean up pip output
cleanup() {
    do-debug "Running cleanup()"
    sed $SED_FLAG -e 's/\.\.\.\+/.../g' | sed $SED_FLAG '/already satisfied/Id' | sed $SED_FLAG -e '/Overwriting/Id' |  sed $SED_FLAG -e '/python executable/Id' | sed $SED_FLAG -e '/no previously-included files/Id'
}

# Buildpack Steps.
function puts-step (){
    # echo " -----> $@"
    RE='s/^/ -----> /; e countdown;'
    echo $@ | sed $SED_FLAG "$RE" #2>/dev/null
}

# Buildpack Warnings.
function puts-warn (){
    # echo " !     $@"
    RE='s/^/ !     /; e countdown;'
    echo $@ | sed $SED_FLAG "$RE" #2>/dev/null
}

# Usage: $ set-env key value
function set-env (){
    do-debug "Adding 'export $1=$2' to $PROFILE_PATH"
    echo "export $1=$2" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
function set-default-env (){
    # sets $1 to $2 if $1 isnt already set
    do-debug "Adding 'export $1=\${$1:-$2}' to $PROFILE_PATH"
    echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
function un-set-env (){
    do-debug "Adding 'unset $1' to $PROFILE_PATH"
    echo "unset $1" >> $PROFILE_PATH
}

# Does some serious copying.
function deep-cp (){
  find -H $1 -maxdepth 1 -name '.*' -a \( -type d -o -type f -o -type l \) -exec cp -a '{}' $2 \;
  cp -r $1/!(tmp) $2
}

# Does some serious moving.
function deep-mv (){
  deep-cp $1 $2

  rm -fr $1/!(tmp)
  find -H $1 -maxdepth 1 -name '.*' -a \( -type d -o -type f -o -type l \) -exec rm -fr '{}' \;
}


# Buildpack Commands.
puts-cmd() {
  echo "     $ $@"
}


function show_files() {
    VAR="$1"
    do-debug "Contents of $VAR:"
    ls -Flah "${VAR}" |& indent-debug || true
}

# Does some serious copying.
function deep_cp_subdirs(){
    for f in $(ls -A $1); do
        cp -af $f $2 |& indent || true
    done
    unset f
}
