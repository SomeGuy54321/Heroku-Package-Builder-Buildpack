#!/usr/bin/env bash

# taken from https://gist.github.com/DinoChiesa/3e3c3866b51290f31243
# which is derived from https://gist.github.com/epiloque/8cf512c6d64641bde388
# which is based on https://gist.github.com/pkuczynski/8665367
## works for arrays of hashes, as long as the hashes do not have arrays
## Gist comment: 'this one does not handle string with doublequotes inside'
### SYNTAX: parse_yaml <yaml_file> <prefix_of_variables>
### USAGE: eval $(parse_yaml file.yaml "YAMLFILE_"
### EXAMPLE:
###     file.yaml =
###         development:
###           adapter: mysql2
###           encoding: utf8
###           database: my_database
###           username: root
###           roles:
###             - admin
###             - developer
###             - guest
###           password:
###           users:
###             -
###               name: pineapple
###               role: admin
###             -
###               name: umbrella
###               role: developer
### DO: eval $(parse_yaml file.yaml "development_")
### OUTPUT:
###     development_adapter=("mysql2")
###     development_encoding=("utf8")
###     development_database=("my_database")
###     development_username=("root")
###     development_roles+=("admin")
###     development_roles+=("developer")
###     development_roles+=("guest")
###     development_users__name+=("pineapple")
###     development_users__role+=("admin")
###     development_users__name+=("umbrella")
###     development_users__role+=("developer")
### > echo ${development_roles[@]}
###   admin developer guest
function parse_yaml() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" \
        "$1" \
    | awk -F"$fs" '{
      indent = length($1)/2;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' \
    | sed 's/_=/+=/g'
}

# print a lot of stuff
function debug_heavy() {
    local EXTRA="|$1"
    do-debug "Relevant local variables:"
    set -o posix && set | sort | grep -E "HOMEBREW|PATH|HOME|APP_DIR|PACKAGE_EXTRAS" | indent
}

# makes the brew output not show lines starting with '       ==>'
alias brew_quiet() {
    if [ $PACKAGE_BUILDER_INSTALL_QUIET -gt 0 ]; then
        grep -vE "^\s*==> " --line-buffered
    fi
}
