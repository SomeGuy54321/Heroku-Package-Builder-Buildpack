#!/usr/bin/env bash
# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>

# Fail fast and fail hard.
set -eo pipefail

# passed by compiler
export BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
export BUILD_DIR=$1
export CACHE_DIR=$2
export CONFIG_DIR=$3

# Syntactic starch (more complex)
source $BIN_DIR/utils

# get things from CONFIG_DIR
export BUILDCACHE=$(get-configvar "$CONFIG_DIR/BUILDCACHE" ".heroku")
BUILDPACK_XTRACE=$(get-configvar "$CONFIG_DIR/BUILDPACK_XTRACE" 0)  # print all commands to log
export BUILD_DEBUG=$(get-configvar "$CONFIG_DIR/BUILD_DEBUG" 0)  # trigger the specially placed debug messages and verbose outputs
export PACKAGE_BUILDER_NOBUILDFAIL=$(get-configvar "$CONFIG_DIR/PACKAGE_BUILDER_NOBUILDFAIL" 0)  # dont fail if a package fails to install
export HOMEBREW_NO_ANALYTICS=$(get-configvar "$CONFIG_DIR/HOMEBREW_NO_ANALYTICS" 0)
export PACKAGE_BUILDER_HOMEBREW_VERBOSE=$(get-configvar "$CONFIG_DIR/PACKAGE_BUILDER_HOMEBREW_VERBOSE" 0)
export PACKAGE_BUILDER_INSTALL_QUIET=$(get-configvar "$CONFIG_DIR/PACKAGE_BUILDER_INSTALL_QUIET" 0)

# print all commands to log
[ $BUILDPACK_XTRACE -gt 0 ] && set -o xtrace || set +o xtrace

# check if i got the right PATH form last buildpack
# assume it contained the same BUILDCACHE, if not rebuild it
do-debug "PATH when starting: '$PATH'"
do-debug "PREV_BUILDPACK_PATH when starting: '$PREV_BUILDPACK_PATH'"
do-debug "BIN_DIR when starting: '$BIN_DIR'"
do-debug "BUILD_DIR when starting: '$BUILD_DIR'"
do-debug "CACHE_DIR when starting: '$CACHE_DIR'"
do-debug "CONFIG_DIR when starting: '$CONFIG_DIR'"

# Paths.
ROOT_DIR=$(dirname $BIN_DIR)
export EXPORT_PATH="$(cd $(dirname $BIN_DIR/../export); pwd)"
# use epoch date to hopefully control the order
# in which the profile.d scripts are executed
export PROFILE_PATH="$BUILD_DIR/.profile.d/$(date +'%s')_finalize.sh"

# Directory Hacks for path consistiency.
APP_DIR='/app'
PACKAGEBUILDER_CACHE=$CACHE_DIR/packagebuilder_cache
CACHED_DIRS=".linuxbrew .cache"

    show_files #################################################################
    # try smth
    do-debug "Trying to find .linuxbrew:"
    find / -type d -path '*.linuxbrew*' -print -quit  | indent-debug || true

# Sanitizing environment variables.
unset GIT_DIR #CONDA_RELDIRPATH_UNDER_BUILDCACHE

# Move whole APP_DIR to PACKAGEBUILDER_CACHE (which is in /tmp)
mkdir -p $PACKAGEBUILDER_CACHE
#deep-mv $APP_DIR $PACKAGEBUILDER_CACHE

#    show_files #################################################################

# Copy Application code in.
deep-mv $BUILD_DIR $APP_DIR


# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR


# Switch to the repo's context.
#cd $BUILD_DIR
cd $PACKAGEBUILDER_CACHE

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile


# ### The Cache
#mkdir -p $CACHE_DIR

  #  show_files #################################################################

# Restore old artifacts from the cache.
#for dir in $CACHED_DIRS; do
#    do-debug "Resursive copying $CACHE_DIR/$dir to $(pwd)"
#    cp -R $CACHE_DIR/$dir . &> /dev/null || true
#done


##########
# do stuff
source $BIN_DIR/utils-extra

# linuxbrew bases its installation on the HOME variable
# so TEMPORARILY we set this to the BUILD_DIR
OLD_HOME=$HOME; export HOME=$PACKAGEBUILDER_CACHE
OLD_PATH=$PATH; export PATH="$HOME/.linuxbrew/bin:$PATH"

do-debug "PATH before checking if we install linuxbrew: '$PATH'"
show_files
show_linuxbrew

source $BIN_DIR/steps/install_linuxbrew.sh

OLD_MANPATH=$MANPATH; export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
OLD_INFOPATH=$INFOPATH; export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
if [ $PACKAGE_BUILDER_HOMEBREW_VERBOSE -gt 0 ]; then export HOMEBREW_VERBOSE=1; fi

# install selected packages
#debug_heavy
source $BIN_DIR/steps/install_packages.sh

# reset to default locations
export HOME=$OLD_HOME; do-debug "HOME reset to '$HOME'"
export PATH=$OLD_PATH; do-debug "PATH reset to '$PATH'"
export MANPATH=$OLD_MANPATH; do-debug "MANPATH reset to '$MANPATH'"
export INFOPATH=$OLD_INFOPATH; do-debug "INFOPATH reset to '$INFOPATH'"

do-debug "Recursive copying $PACKAGEBUILDER_CACHE to $APP_DIR"
cp -rf "$PACKAGEBUILDER_CACHE/." $APP_DIR
##########


# Make profile.d directory.
if [ ! -d "$PROFILE_PATH" ]; then
    mkdir -p $(dirname $PROFILE_PATH)
fi

## Set context environment variables.
set-env PATH "$HOME/.linuxbrew/bin:\$PATH"
set-env MANPATH "$HOME/.linuxbrew/share/man:\$MANPATH"
set-env INFOPATH "$HOME/.linuxbrew/share/info:\$INFOPATH"
set-default-env HOMEBREW_NO_ANALYTICS $HOMEBREW_NO_ANALYTICS


# Experimental post_compile hook.
source $BIN_DIR/steps/hooks/post_compile


# ### Fin.
deep-mv $BUILD_DIR $ORIG_BUILD_DIR
#deep-mv $PACKAGEBUILDER_CACHE $APP_DIR

show_files

# writing the export file dynamically
cat <<EOF > $BIN_DIR/../export

export PREV_BUILDPACK_PATH=$PATH

EOF
