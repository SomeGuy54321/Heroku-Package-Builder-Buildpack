#!/usr/bin/env bash
set -eo pipefail
# Explanation:
#   - All git code is initially in BUILD_DIR
#   - Move all git code from BUILD_DIR to APP_DIR (i.e. /app)
#   - Move the selected CACHE_DIR code to APP_DIR too
#   - Do stuff in APP_DIR
#   - Copy some of the APP_DIR stuff to CACHE_DIR
#   - Move all of APP_DIR to BUILD_DIR
#
# Using this commit tag:
#   git rev-parse --verify HEAD  -->  9e37f8101af862ed2a0d7e28c734318668d927f5
#   git --git-dir="$BUILD_DIR/.linuxbrew/.git" show --oneline -s | cut -d' ' -f1  -->  d8c8b867b
export LINUXBREW_COMMIT="9e37f8101af862ed2a0d7e28c734318668d927f5"
#
# Start time:
export BUILD_START_TIME=$(date +'%s')
#
# Usage:
#     $ bin/compile <build-dir> <cache-dir> <env-path>


# passed by compiler
export BIN_DIR=$(cd $(dirname $0); pwd)
export BUILD_DIR=$1
export CACHE_DIR=$2
export CONFIG_DIR=$3

# Sanitizing environment variables.
unset GIT_DIR

# Syntactic starch (more complex)
# Note '-d' doesnt match hidden dirs
for f in $(ls -d $BIN_DIR/utils.d/*); do source $f; done

# debug settings
export_configvar BUILD_DEBUG 0  # trigger the specially placed debug messages and verbose outputs
export_configvar BUILDPACK_XTRACE 0  # print all commands to log
if [ $BUILDPACK_XTRACE -gt 0 ]; then
    set -o xtrace
    # print a lot when xtracing
    # http://stackoverflow.com/a/17805088/4106215
    export ORIG_PS4=$PS4
    export export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
else
    set +o xtrace  # print all commands to log, plus filename+linenum, or not
fi

export_configvar PACKAGE_BUILDER_HOMEBREW_VERBOSE 0
if [ $PACKAGE_BUILDER_HOMEBREW_VERBOSE -gt 0 ]; then export HOMEBREW_VERBOSE=1; fi  # maybe do verbose
export_configvar PACKAGE_BUILDER_INSTALL_QUIET 0

# check if i got the right PATH form last buildpack
do-debug "PREV_BUILDPACK_PATH when starting: '$PREV_BUILDPACK_PATH'"
do-debug "PATH when starting: '$PATH'"
do-debug "BIN_DIR when starting: '$BIN_DIR'"
do-debug "BUILD_DIR when starting: '$BUILD_DIR'"
do-debug "CACHE_DIR when starting: '$CACHE_DIR'"
do-debug "CONFIG_DIR when starting: '$CONFIG_DIR'"


# get things from CONFIG_DIR
export_configvar PACKAGE_BUILDER_MAX_BUILDTIME 14
export PACKAGE_BUILDER_MAX_BUILDTIME=$(min $PACKAGE_BUILDER_MAX_BUILDTIME 14)
export_configvar BUILDCACHE ".heroku"
export_configvar PACKAGE_BUILDER_NOBUILDFAIL 0  # dont fail if a package fails to install
export_configvar HOMEBREW_NO_ANALYTICS 0
export_configvar PACKAGE_BUILDER_REINSTALL_LINUXBREW 0
# use epoch date to hopefully control the order in which the profile.d scripts are executed
export PROFILE_PATH="$BUILD_DIR/.profile.d/$(date +'%s')_finalize.sh"
export_configvar PACKAGE_BUILDER_NOINSTALL_GCC 0
export_configvar PACKAGE_BUILDER_NOINSTALL_RUBY 0
export_configvar PACKAGE_BUILDER_NOINSTALL_PERL 0
export_configvar PACKAGE_BUILDER_NOINSTALL_PYTHON 0
export_configvar PACKAGE_BUILDER_NOINSTALL_DEFAULTS 0


# Make profile.d directory. if [ -d /.dir ] doesnt work for hidden dirs
[ $(ls -A $PROFILE_PATH 2>/dev/null | grep --count .) -eq 0 ] && mkdir -p $(dirname $PROFILE_PATH) || true


# setup the time limit, might throw an error if the user set PACKAGE_BUILDER_MAX_BUILDTIME to a noninteger
# do something with this someday
PACKAGE_BUILDER_MAX_BUILDTIME_SECONDS=$(( $PACKAGE_BUILDER_MAX_BUILDTIME * 60 ))
CURRENT_SECONDS=$(date +'%s')
export BUILD_MAX_RUNTIME=$(($PACKAGE_BUILDER_MAX_BUILDTIME_SECONDS + $CURRENT_SECONDS))


# Move all code from BUILD_DIR to APP_DIR, make APP_DIR the new BUILD_DIR, and enter the new BUILD_DIR
APP_DIR="/app"
deep-mv $BUILD_DIR $APP_DIR
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR
cd $BUILD_DIR


### START Linuxbrew-specific stuff #####################################################################################
# Get my specific cache
ORIG_CACHE_DIR=$CACHE_DIR
CACHE_DIR=$CACHE_DIR/packagebuilder_cache
mkdir -p $CACHE_DIR
LINUXBREW_DIRS=".linuxbrew .cache"
CURR_DIR="$PWD"

# show_linuxbrew_files

# Move the linuxbrew cache to APP_DIR, or optionally reinstall by deleting the cache dirs
do-debug "PACKAGE_BUILDER_REINSTALL_LINUXBREW=\"$PACKAGE_BUILDER_REINSTALL_LINUXBREW\""
# show_files "$PWD/"
for d in $LINUXBREW_DIRS; do

    if [ $PACKAGE_BUILDER_REINSTALL_LINUXBREW -gt 0 ]; then
        do-debug "Deleting cache $d and ${d}.tar.xz"
        rm -rf $CACHE_DIR/$d $CACHE_DIR/${d}.tar.xz || true
    else
        if [[ "$d" == ".linuxbrew" ]] && [ -f "$CACHE_DIR/$d.tar.xz" ]; then  # if the archive doesnt exist then assume its the first install
            decompress_to_builddir $CACHE_DIR/${d}.tar.xz
        fi
    fi
done

# linuxbrew bases its installation on the HOME variable so temporarily we set this to the BUILD_DIR
OLD_HOME=$HOME; export HOME=$BUILD_DIR
OLD_PATH=$PATH; export PATH="$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH"
OLD_MANPATH=$MANPATH; export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
OLD_INFOPATH=$INFOPATH; export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
do-debug "PATH before checking if we install linuxbrew: '$PATH'"

source $BIN_DIR/steps/install_linuxbrew.sh
source $BIN_DIR/steps/install_packages.sh

# Copy the new linuxbrew directories to CACHE_DIR
for d in $LINUXBREW_DIRS; do
    compress_to_cache "$d"
done

# empty the local .cache to save space
do-debug "Emptying $CURR_DIR/.cache"
rm -rf "$CURR_DIR/.cache/Homebrew"/* |& indent-debug

# for some reason the brew executable ends up in /app/bin when followed by a Scala buildpack.
# this is weird, this is a workaround:
echo "alias brew='$(which brew)'" >>"$PROFILE_PATH"

# reset to default locations
export HOME=$OLD_HOME; do-debug "HOME reset to '$HOME'"
export PATH=$OLD_PATH; do-debug "PATH reset to '$PATH'"
export MANPATH=$OLD_MANPATH; do-debug "MANPATH reset to '$MANPATH'"
export INFOPATH=$OLD_INFOPATH; do-debug "INFOPATH reset to '$INFOPATH'"

### END Linuxbrew-specific stuff #######################################################################################


## Set context environment variables.
set-env PATH "\$HOME/.linuxbrew/bin:\$HOME/.linuxbrew/sbin:\$PATH"
set-env MANPATH "\$HOME/.linuxbrew/share/man:\$MANPATH"
set-env INFOPATH "\$HOME/.linuxbrew/share/info:\$INFOPATH"
set-default-env HOMEBREW_NO_ANALYTICS $HOMEBREW_NO_ANALYTICS
#unexport_all_configvars


# Move all things in /app to BUILD_DIR (which will eventually be moved back)
deep-mv $BUILD_DIR $ORIG_BUILD_DIR


# writing the export file dynamically
cat <<EOF > $BIN_DIR/../export

export PREV_BUILDPACK_PATH=$PATH

EOF

# reset some things to orig values just to be safe
export PS4=$ORIG_PS4
